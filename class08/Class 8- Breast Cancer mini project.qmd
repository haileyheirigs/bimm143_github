---
title: "Class 8: Breast Cancer mini project"
author: "Hailey Heirigs (PID: A16962278)"
format: gfm
toc: true
---

## Background 

This mini project explores unsupervised learning techniques applied to the Wisconsin Breast Cancer Diagnostic Data Set, which contains measuremenst of human breast mass cell nuclei. The project guides the user through exploratory data analysis, performing and interpreting Principal Component Analysis (PCA) to reduce the dimensionality of the data while retaining variance, and applying hierarchical clustering to better separate benign and malignant cell samples, evaluating the results using metrics like sensitivity and specificity, and finally demonstrating how to predict the classification of new samples using the developed PCA model. 

## Data Import

Our data come from the U. of Wisconsin Medical Center

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
```

> Q1. How many patients/samples are in this dataset? 

```{r}
nrow(wisc.df)
```


> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.df)
```
```{r}
length( grep("mean", colnames(wisc.df), value = T) )
```

There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis. 

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Now we can remove it from the `wisc.df`
```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering

```{r}
kmeans(wisc.data, centers = 2)
```

let's try `hclust`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()` 
```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster? 

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values. 

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis (PCA)

### The Importance of Data Scaling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`. 

```{r}
#prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading. 

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation. 

```{r}
colMeans(mtcars)
```
```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better represenation and analysis of all the columns. 

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a. score plot, orientation plot, or PC1 vs PC2 plot). The "loadings plot" says how the original variables contribute to the new PCs. 

A loadings plot of the unscaled PCA results 
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scaled data. 

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```
PC plot of scaled PCA results 
```{r}
library(ggrepel)

ggplot(pc.scale$x) + 
  aes(PC1, PC2, label=rownames(pc.scale$x)) + 
  geom_point() + 
  geom_text()
```

> **Key point**: In general, we will set `scale=TRUE` when we do PCA. This is not the default but probably should be... 

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint we do! 

### PCA of this wisc.data 

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well this PCA data is doing in terms of capturing the variance (or spread) in the data, we can use the `summary()` function. 

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2 

```{r}
ggplot(wisc.pr$x) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point() +
  xlab("PC1 (44.3%)") + 
  ylab("PC2 (19%)")
```
> Q10. Please answer up to this Q10... ;

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

[44.3%]

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 principal components are required to describe at least 70% of the original variance in the data. 

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 principal components are required to describe at least 70% of the original variance in the data. 

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

The difference diagnosises are grouped very visibly by color and their distinct groupings stand out to me. It is easy to understand and see, due to being able to see where they fall on the scatter plot. 

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
ggplot(wisc.pr$x) + 
  aes(PC1, PC3, col=diagnosis) + 
  geom_point() +
  xlab("PC1 (44.3%)") + 
  ylab("PC2 (9.4%)")
```
After generating a similar plot, I notice that the diagnosises of benign or malignant are still grouped together, but are at a lower percentage on the y-axis. This is because the PC3 proportion of variance is lower, and so the shift is to be expected. I also notice slightly more overlap between the two diagnosises, in comparison to the PC1 and PC2 plot from before. 

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
pve <- pr.var / sum(pr.var)

plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```
The component of the loading vector `wisc.pr$rotation[,1]` for the feature of `concave.points_mean` is -0.26085376. 

```{r}
wisc.pr$rotation[,1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

The minimum number of principal components required to explain 80% of the variance of the data is 5 components combined. 


## 5. Combining Methods 

We can take our PCA results and use them as a basis set for other analysis such as clustering. 

### Clustering on PCA results 

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[,1:2]), method="ward.D2" )
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):
```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

How do my cluster grps compare to the expert diagnosis from

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

The newly created model with four clusters separates the two diagnoses in a cleaner way, but has the potential to be hard to read; whereas a model that separates via two clusters could be more distinct and helpful in visualization.

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

They did really badly. We do much better after PCA - the new PCA variables (what we call a basis set) gives us much better separation of M and B. 


## 7. Prediction

We can use our PCA model for analysis of new "unseen" data. In this case from U. Mich. 

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

Patient 2 for sure. 

**answer questions 1-10, 15, 16, 18 for homework.**
